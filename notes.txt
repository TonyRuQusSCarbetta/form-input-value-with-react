#1 CREATE a CHANGE method that passes and EVENT as an arguement.
#2 ADD an onChange EVENT LISTENER to your input tag located in render.
#3 BIND the new change method to your class.
#4 Set the state with .THIS.STATE({})
#5 Specify what we are targeting to move up to the globalState (don't forget [BRACKETS] when selecting input/select tags)
    example1:
              [event.target.name]: event.target.value
    example2:
              [event.target.type]: event.target.value

    So the name we gave the input/select tag is being selected
    and than we are giving it's value,

  WHAT ARE WE DOING?
    when the input/select changes by the user, we are adding the new value of that input/selector to the global current state.

  THEREFORE,
    the new global state would now have a new property with a new value...
    for example...
    City: Miami

#6 Add a CALLBACK FUNCTION after the object (don't forget the COMMA!!!)



#7 FINAL CODE

class App extends Component {
  constructor () {
    super()
    this.state = {
      firstName: 'Tony',

    }
    this.change = this.change.bind(this);
  }
  change(event) {
    this.setState({
      [event.target.name]: event.target.value
    }, () => {
      console.log(this.state);
    })
      console.log(event.target.value);
  }

  render() {
    return (<div>

      <h4>Filter</h4>

      <label htmlFor="city">City</label>
      <select name="city" className="filters city" onChange={this.change}>
        <option value="All">All</option>
        <option value="San Francisco">San Francisco</option>
        <option value="Miami">Miami</option>
        <option value="New York City">New York City</option>
      </select>

      <label htmlFor="extras">
        <input name="swimming_pool" value="swimming pool" type="checkbox" onChange={this.change}/>
        <span>Swimming Pool</span>
      </label>

      <label htmlFor="extras">
        <input name="garage" value="garage" type="checkbox" onChange={this.change}/>
        <span>Garage</span>
      </label>

    </div>)
  }
}
